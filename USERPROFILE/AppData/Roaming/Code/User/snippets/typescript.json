{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"For loop": {
		"prefix": "fori",
		"body": [
			"for (let ${1:i} = ${2:0}; ${1:i} < ${3:n}; ${1:i}++) {",
			"    $0",
			"}"
		],
		"description": "For loop"
	},
	"Print variable": {
		"prefix": "qlog",
		"body": [
			"console.log(\"${1:arr}\", ${1:arr});",
		],
		"description": "Print variable"
	},
	"sleep": {
		"prefix": "!sleep",
		"body": [
			"async function sleep(ms: number) {",
			"  return new Promise<void>((resolve, reject) => {",
			"    setTimeout(() => {",
			"      resolve()",
			"    }, ms);",
			"  });",
			"}"
		],
		"description": "sleep"
	},
	"Redux slice": {
		"prefix": "!slice",
		"body": [
			"import { createSlice } from \"@reduxjs/toolkit\";",
			"",
			"const initialState = false;",
			"",
			"export const ${1:my}Slice = createSlice({",
			"  name: \"${1:my}\",",
			"  initialState,",
			"  reducers: {",
			"    setIsReady: (state, action) => action.payload,",
			"  },",
			"});",
			"",
			"export const { setIsReady } = ${1:my}Slice.actions;",
			"",
			"export default ${1:my}Slice.reducer;",
			""
		],
		"description": "Redux slice"
	},
}