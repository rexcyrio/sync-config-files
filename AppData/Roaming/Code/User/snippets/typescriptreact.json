{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"For loop": {
		"prefix": "fori",
		"body": [
			"for (let ${1:i} = ${2:0}; ${1:i} < ${3:n}; ${1:i}++) {",
			"    $0",
			"}"
		],
		"description": "For loop"
	},
	"Print variable": {
		"prefix": "qlog",
		"body": [
			"console.log(\"${1:arr}\", ${1:arr});",
		],
		"description": "Print variable"
	},
	"sleep": {
		"prefix": "!sleep",
		"body": [
			"async function sleep(ms: number) {",
			"  return new Promise<void>((resolve, reject) => {",
			"    setTimeout(() => {",
			"      resolve()",
			"    }, ms);",
			"  });",
			"}"
		],
		"description": "sleep"
	},
	"Redux dispatch": {
		"prefix": "!dispatch",
		"body": [
			"const dispatch = useAppDispatch();"
		],
		"description": "Redux dispatch"
	},
	"React useMemo Hook": {
		"prefix": "!usememo",
		"body": [
			"const ${1:name} = useMemo(() => (",
			"  $0",
			"), []);"
		],
		"description": "React useMemo Hook"
	},
	"React useState Hook": {
		"prefix": "!usestate",
		"body": [
			"const [${1:num}, set${1:num}] = useState(${2:0});"
		],
		"description": "React useState Hook"
	},
	"React useEffect Hook": {
		"prefix": "!useeffect",
		"body": [
			"useEffect(() => {",
			"  $0",
			"}, []);"
		],
		"description": "React useEffect Hook"
	},
	"React useCallback Hook": {
		"prefix": "!usecallback",
		"body": [
			"const handle${1:Open} = useCallback(() => {",
			"  $0",
			"}, []);"
		],
		"description": "React useCallback Hook"
	},
	"React component": {
		"prefix": "!react",
		"body": [
			"interface ${1:Name}Props {",
			"  a: string;",
			"}",
			"",
			"function ${1:Name}({ a }: ${1:Name}Props): JSX.Element {",
			"  return (",
			"    $0",
			"  );",
			"}",
			"",
			"export default ${1:Name};"
		],
		"description": "React component"
	},
	"React centered <div>": {
		"prefix": "!div",
		"body": [
			"<div",
			"  style={{",
			"    display: \"flex\",",
			"    alignItems: \"center\",",
			"    justifyContent: \"center\",",
			"  }}",
			">$0</div>",
			""
		],
		"description": "React centered <div>"
	},
}