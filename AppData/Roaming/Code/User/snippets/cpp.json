{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"For loop": {
		"prefix": "fori",
		"body": [
			"for (size_t ${1:i} = ${2:0}; ${1:i} < ${3:n}; ${1:i}++) {",
			"    $0",
			"}"
		],
		"description": "For loop"
	},
	"Print variable": {
		"prefix": "qlog",
		"body": [
			"std::cout << \"${1} = \" << ${1} << \"\\n\";"
		],
		"description": "Print variable"
	},
	"Boilerplate for Kattis": {
		"prefix": "!kattis",
		"body": [
			"#include <iostream>",
			"#include <string>",
			"#include <vector>",
			"",
			"template <typename T> void printVector(std::vector<T> v) {",
			"    if (v.size() == 0) {",
			"        return;",
			"    }",
			"",
			"    std::cout << v[0];",
			"    for (int i = 1; i < v.size(); i++) {",
			"        std::cout << \" \" << v[i];",
			"    }",
			"    std::cout << '\\n';",
			"}",
			"",
			"std::string readLine() {",
			"    std::string line;",
			"    std::getline(std::cin, line);",
			"    return line;",
			"}",
			"",
			"std::vector<std::string> split(std::string string, std::string delimiter) {",
			"    std::vector<std::string> allTokens;",
			"",
			"    size_t pos = 0;",
			"    while ((pos = string.find(delimiter)) != std::string::npos) {",
			"        allTokens.push_back(string.substr(0, pos));",
			"        string.erase(0, pos + delimiter.length());",
			"    }",
			"    if (!string.empty()) {",
			"        allTokens.push_back(string.substr(0, pos));",
			"    }",
			"",
			"    return allTokens;",
			"}",
			"",
			"int main(int argc, char const *argv[]) {",
			"    std::vector<std::string> line = split(readLine(), \" \");",
			"    $0",
			"    return 0; ",
			"}",
			""
		],
		"description": "Boilerplate for Kattis"
	}
}